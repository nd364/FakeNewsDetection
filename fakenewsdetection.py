# -*- coding: utf-8 -*-
"""FakeNewsDetection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12HgmUEUeT_KRJXmow2U1z6YM-RptJsbN
"""

import pandas as pd

# Load both datasets
df_true = pd.read_csv("/content/True.csv")  # Adjust the filename
df_fake = pd.read_csv("/content/Fake.csv")  # Adjust the filename

# Assign labels (1 for real, 0 for fake)
df_true['label'] = 1
df_fake['label'] = 0

# Keep only relevant columns (assuming "text" column exists)
df_true = df_true[['text', 'label']]
df_fake = df_fake[['text', 'label']]

# Combine both datasets into one
df = pd.concat([df_true, df_fake], axis=0).reset_index(drop=True)

# Shuffle the dataset to mix fake and real news
df = df.sample(frac=1, random_state=42).reset_index(drop=True)

print(df.head())  # Check if data is combined correctly

"""preprocessing the text

"""

import re
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize

# Download required NLTK resources
nltk.download('stopwords')
nltk.download('punkt')
nltk.download('punkt_tab')  # Download the Punkt sentence tokenizer data

stop_words = set(stopwords.words('english'))

def preprocess_text(text):
    if isinstance(text, str):  # Ensure text is a string
        text = re.sub(r'\W', ' ', text)  # Remove special characters
        words = word_tokenize(text.lower())  # Tokenize and lowercase
        return ' '.join([word for word in words if word not in stop_words])  # Remove stopwords
    return ""

df['text'] = df['text'].apply(preprocess_text)

"""converting text to features

"""

from sklearn.feature_extraction.text import TfidfVectorizer

vectorizer = TfidfVectorizer(max_features=5000)  # Convert text into numerical format
X = vectorizer.fit_transform(df['text'])
y = df['label']

"""splitting data to training and testing

"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(f"Training samples: {len(y_train)}, Testing samples: {len(y_test)}")

"""training the ML model"""

from sklearn.linear_model import PassiveAggressiveClassifier

model = PassiveAggressiveClassifier(max_iter=50)
model.fit(X_train, y_train)

"""evaluating the model

"""

from sklearn.metrics import accuracy_score, confusion_matrix

y_pred = model.predict(X_test)
acc = accuracy_score(y_test, y_pred)
cm = confusion_matrix(y_test, y_pred)

print(f'Accuracy: {acc * 100:.2f}%')
print('Confusion Matrix:\n', cm)

import joblib

joblib.dump(model, 'fake_news_detector.pkl')
joblib.dump(vectorizer, 'vectorizer.pkl')

print("Model and vectorizer saved!")